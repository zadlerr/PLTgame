----------------------------
So basically Julie walked me through the microc code, showing me what the main building blocks of the language are going to look like in the end. She walked me through a lot of the microc code which is incredibly helpful and if we all have a pretty good understanding of whats going on in that code the project will go pretty smoothly. 

--------------------------
General parts of the program

For the Hello World submission we need a working scanner, parser, ast, and the basic of the testing suite. 

The scanner is responsible for tokenizing the program, then the parser corresponds to the CFG for the language

The parser takes the tokens from the scanner and turning them into ast nodes. (eg. if see litieral token, then make that a node which is specified in ast. since literal is int its gonne take the first arg associated with literal and put it in node.)

Precedence is defined in the parser. The ast file is more high level.

microc.ml is driver that calls other parts. Its grabbing stuff from stdin then running the appropriate programs. 

--------------------------
We are compiling into LLVM code. LLVM is a low level computer language similar to MIPS, that trash from Fundamentals. 

Generating the LLVM code from Ocaml. There is a dope library that does most of it for us, and Julie admitted she doesn't know how a lot of it works (and that a lot of the code we can copy straight from microc and other projects).
codegen.ml
codegen translate
llvm.moe - ocaml library that generates llvm for us. 
llvm.moe/ocaml
go to latest and theres good documentation there
beginning of "translate" is just saving a bunch of stuff from the library with simpler variable names to use later.. 

turns objects from ast nodes into llvm types from earlier. 

Basically just go through this file and look up a couple things for each block to get a cursory understanding of what's going on there.

----------------------------
Makefile
We can keep the same Makefile. We will have the same filenames for our code as every other language - just need to change the file extension name from '.mc' to '.vent' or whatever we choose.

-----------------------------
testscript.sh

folder in main compiler directory called test. 
A zillion little test programs in the language. test shell will run each test and compare it to the .out file. 
We can keep and use the same .sh file from microc, which basically just runs all of the little tests we define and throws errors if the code doesn't match expected output.

'Fail' tests - expected to throw error somewhere. Used to make sure semantic checker is working as it should. These make sure that improper programs are caught. '.err' extension.  


------------------------------
The semantic checker

Julie said we should really get a basic semantic checker working for our program. 

The semantic checker is responsible for making sure that the program is a valid program (eg. type checking and ensuring logically it works - things the scanner and parser won't throw errors for).

semant.ml is single function that checks the program to make sure types match and what not. 
checks for duplicate globals
Catches things that aren't caught by scanner or parser. 
checking type consistency and whatnot. 
